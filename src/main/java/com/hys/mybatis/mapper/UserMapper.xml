<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用是对sql惊醒分类化管理，理解SQL隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用-->
<mapper namespace="com.hys.mybatis.mapper.UserMapper">

	<!-- 定义SQL片段 
	id：SQL片段的标识
	经验：一般基于单表来定义sql片段，这样可以提高片段的可重用性
	在SQL片段中不要包括<where>标签-->
	<sql id="query_user_where">
		<if test="userCustom != null">
			<if test="userCustom.phone != null and userCustom.phone != ''">
				 and phone like '%${userCustom.phone}%'
			</if>
			<if test="userCustom.username != null and userCustom.username != ''">
				and username like '%${userCustom.username}%'
			</if>
		</if>
	</sql>

	<!-- 定义resultMap
	将select id id_,username username_ from where id = #{id}和User类中的属性做一个映射关系
	type：resultMap最终映射的java对象类型，可以使用别名
	id:对resultMap的唯一标识 -->
	<resultMap type="user" id="userResultMap">
		<!-- id表示查询结果集中唯一标识
		column:查询出来的列名
		property:指定pojo类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系） -->
		<id column="id_" property="id"/>
		<!-- result表示查询结果集中唯一标识
		column:查询出来的列名
		property:指定pojo类型中的属性名
		最终resultMap对column和property做一个映射关系（对应关系） -->
		<result column="username_" property="username" />
		<result column="phone_" property="phone" />
	</resultMap>
	
	<!-- 用户信息动态综合查询 -->
	<!-- ${userCustom.username}：取出pojo包装对象中的姓名
	 ${userCustom.phone}：取出pojo包装对象中的电话号码-->
	<select id="findUserListByAt" parameterType="com.hys.mybatis.po.UserQueryVo" resultType="com.hys.mybatis.po.User">
		select * from tb_user 
		<!-- <where></where>标签可以自动的去掉条件中的第一个and -->
		<where>
			<!-- 引用sql片段 ,
			如果refid指定的片段不在本mapper文件用，名称前要加namespace-->
			<include refid="query_user_where"></include>
			
			<!-- 还可以引用其它的sql片段，如下：
			<include refid="query_商品_where"></include>
			<include refid="query_u部门r_where"></include> -->
		</where>
	</select>
	
	<!-- 用户信息综合查询 -->
	<!-- ${userCustom.username}：取出pojo包装对象中的姓名
	 ${userCustom.phone}：取出pojo包装对象中的电话号码-->
	<select id="findUserListByPU" parameterType="com.hys.mybatis.po.UserQueryVo" resultType="com.hys.mybatis.po.User">
		select * from tb_user where phone like '%${userCustom.phone}%' and username like '%${userCustom.username}%'
	</select>
	
	<!-- 用户信息的综合查询总数 
	parameterType:指定的输入类型和findUserListById一样
	resultType：输出结果类型
	-->
	<select id="findUserCount" parameterType="com.hys.mybatis.po.UserQueryVo" resultType="int">
		select count(1) from tb_user 
		<!-- <where></where>标签可以自动的去掉条件中的第一个and -->
		<where>
			<if test="userCustom != null">
				<if test="userCustom.phone != null and userCustom.phone != ''">
					 and phone like '%${userCustom.phone}%'
				</if>
				<if test="userCustom.username != null and userCustom.username != ''">
					and username like '%${userCustom.username}%'
				</if>
			</if>
		</where>
	</select>
	
	<!--在映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
    id：标识映射文件中的SQL ,
    	将SQL语句封装到mapperdSatement对象中,所以将id称为statement的id
    	parameterType:指定输入参数的类型
    	#{}表示一个占位符号
    	#{id}:其中id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
    	resultType:指定SQL输出结果的所映射的Java对象类型，select指定resultType表示将单条记录映射成的Java对象。
    	-->
  <select id="findUserById" parameterType="int" resultType="com.hys.mybatis.po.User">
	select * from tb_user where id = #{id}
  </select>
  
 	<!--使用resultMap进行输出映射
	resultMap:指定定义的resultMap的id，如果这个resultMap在其它的Mapper中使用，前面需要加上对应所在的namespace-->
   <select id="findUserByIdResultMap" parameterType="int"  resultMap="userResultMap">
	select id id_,username username_ ,phone phone_ from tb_user where id = #{id}
   </select>
  
  <!-- 根据用户名称模糊查询用户信息 ,可能返回多条数据
  resultType:指定的就是单条记录所映射的java对象类型
  ${}:表示凭借sql串，将接收到内容不加任何修饰拼接在sql中
  使用${}凭借sql 会引起sql注入
  ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能是value-->
   <select id="findUserByName" parameterType="java.lang.String" resultType="User">
   select * from tb_user where username like '%${value}%';
   </select>
  
   <select id="findUsersByName" parameterType="java.lang.String" resultType="user">
   select * from tb_user where username like '%${value}%';
   </select>
  
 	<!--添加用户 
 	parameterType:指定输入参数类型是pojo(包括用户信息)
 	#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值-->
 	<insert id="insertUser" parameterType="com.hys.mybatis.po.User">
 		insert into tb_user(username, password, phone, email, created, updated) 
 		values(#{username},#{password},#{phone},#{email},#{created},#{updated})
 	</insert>
 	
 	<insert id="insertUserAll" parameterType="com.hys.mybatis.po.User">
 		insert into tb_user(id,username, password, phone, email, created, updated) 
 		values(#{id},#{username},#{password},#{phone},#{email},#{created},#{updated})
 	</insert>
 	
 	<insert id="insertUserSmall" parameterType="com.hys.mybatis.po.User">
 		insert into tb_user(username, password) 
 		values(#{username},#{password})
 	</insert>
 	
 	<insert id="insertUserSmall_wt" parameterType="com.hys.mybatis.po.User">
 		<!-- 将插入数据的主键返回到user对象中
 		select last_insert_id():得到insert进去记录的主键值，只适用于自增主键
 		keyProperty:将查询到主键值设置到parameterType指定的对象的那个属性
 		order:是select last_insert_id(()相对于insert语句来说它的执行顺序
 		 -->
 		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
 			select last_insert_id()
 		</selectKey>
 		insert into tb_user(username, password, created, updated) 
 		values(#{username},#{password},#{created},#{updated})
 	</insert>
 	
 	<insert id="insertUserSmall_uuid" parameterType="com.hys.mybatis.po.User">
 		<!-- 将插入数据的主键返回到user对象中
 		select last_insert_id():得到insert进去记录的主键值，只适用于自增主键
 		keyProperty:将查询到主键值设置到parameterType指定的对象的那个属性
 		order:是select last_insert_id(()相对于insert语句来说它的执行顺序
 		 -->
 		<!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
 			select last_insert_id()
 		</selectKey> -->
 		<!-- 使用MySQL的uuid()生成主键
 		执行过程：
 		首先通过uuid()得到主键，将主键设置到user对象的id属性中
 		其次在insert执行时，从user对象中去除id属性值 -->
 		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
 			select uuid();
 		</selectKey>
 		insert into tb_user(id,username, password, created, updated) 
 		values(#{id}, #{username},#{password},#{created},#{updated})
 	</insert>
 	
 	<!-- 删除用户 
 	根据id删除用户信息，需要输入id-->
 	<delete id="deleteUser" parameterType="java.lang.Integer">
 		delete from tb_user where id=#{id}
 	</delete>
 	
 	<!-- 根据id更新用户 
 	分析：
 	需要传入用户的id
 	需要传入用户的更新信息
 	parameterType指定user对象，包括id和更新信息，
 	注意：用户信息中id必须存在
 	#{id}：从输入user对象中获取id属性值
 	-->
 	<update id="updateUser" parameterType="com.hys.mybatis.po.User">
 		update tb_user set username=#{username},password=#{password},created=#{created},updated=#{updated} where id = #{id}
 	</update>
  
</mapper>