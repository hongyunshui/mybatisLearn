<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用是对sql惊醒分类化管理，理解SQL隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用-->
<mapper namespace="com.hys.mybatis.mapper.OrderMapperCustom">
  <!-- 订单关联查询用户的resultMap
          将给整个查询结果映射到order中 -->
  <resultMap type="com.hys.mybatis.po.Order" id="orderCustomMap">
  	<id column="id" property="id"/>
  <!-- 配置映射的订单信息 -->
  <!--  指定查询列中的唯一标识，订单中的唯一标识，如果有多个列组成的唯一标识，配置多个id
  	column:订单信息的唯一标识列
  	property：订单信息 的唯一标识列所映射到order中哪个属性 -->
    
    <result column="payment" property="payment" />
    <result column="payment_type" property="payment_type"/>
    <result column="post_fee" property="post_fee"/>
    <result column="status" property="status"/>
    <result column="user_id" property="user_id"/>
    
    <!--    配置映射的关联用户信息
    	用于映射关联查询单个对象的信息 
    	要将关联查询的用户信息映射到order属性中的哪个属性 -->
    <association property="user" javaType="com.hys.mybatis.po.User">
    <!-- 关联查询的用户的唯一标识 
    	column:指定唯一标识用户信息的列
    	JavaType：映射到User的哪个属性 -->
      <id column="user_id" property="id"/>
      <result column="username" property="username"/>
      <result column="phone" property="phone"/>
      <result column="updated" property="updated"/>    
    </association>
   </resultMap>
   
   <!-- 查询订单关联用户及订单明细的resultMap
   	 将查询结果映射到order中-->
   <resultMap type="com.hys.mybatis.po.Order" id="orderUserItemMap">
     <!-- 订单信息 -->
     <id column="order_id" property="id"/>
     <id column="user_id" property="user_id"/>
     <result column="payment" property="payment"/>
     <result column="payment_type" property="payment_type"/>
     <result column="post_fee" property="post_fee"/>
     <result column="status" property="status"/>
     <!-- 用户信息 -->
     <association property="user" javaType="com.hys.mybatis.po.User">
       <!-- 关联查询的用户的唯一标识 
    	column:指定唯一标识用户信息的列
    	JavaType：映射到User的哪个属性 -->
      <id column="user_id" property="id"/>
      <result column="username" property="username"/>
      <result column="phone" property="phone"/>
      <result column="updated" property="updated"/> 
     </association>
     <!-- 订单明细信息
     	一个订单关联查询出了多个明细，要使用collection进行映射
     	collection：对关联查询到多条记录映射到集合对象中
     	property:将关联查询到多条记录映射到 com.hys.mybatis.po.Order 哪个属性
     	ofType:指定映射到集合属性中pojo的类型 -->
     <collection property="orderDetails" ofType="com.hys.mybatis.po.Orderdetail">
       <id column="item_id" property="id"/>
       <result column="item_id" property="id"/>
       <result column="num" property="num"/>
       <result column="pic_path" property="pic_path"/>
       <result column="price" property="price"/>
       <result column="title" property="title"/>
       <result column="total_fee" property="total_fee"/>
     </collection>
   </resultMap>
   
   <resultMap type="com.hys.mybatis.po.User" id="userItemMap">
   
      <!-- 用户信息 -->
   	  <id column="user_id" property="id"/>
      <result column="username" property="username"/>
      <result column="phone" property="phone"/>
      <result column="updated" property="updated"/>
      <!-- 订单信息
      	一个用户对应多个订单，使用collection映射 -->
      <collection property="order" ofType="com.hys.mybatis.po.Order" >
        <id column="order_id" property="id"/>
        <result column="payment" property="payment"/>
        <result column="payment_type" property="payment_type"/>
        <result column="post_fee" property="post_fee"/>
        <result column="status" property="status"/>
         <!-- 订单明细信息
         	一个订单对应多个订单明细，使用collection映射 -->
        <collection property="orderDetails" ofType="com.hys.mybatis.po.Orderdetail">
          <id column="order_item_id" property="id"/>
          <result column="num" property="num"/>
          <result column="total_fee" property="total_fee"/>
          <!-- 商品信息 
          	一个明细对应一个商品-->
          <association property="item" javaType="com.hys.mybatis.po.Item">
            <id column="item_id" property="id"/>
            <result column="item_title" property="title"/>
            <result column="item_price" property="price"/>          	
          </association>
        </collection>
      </collection>
   </resultMap>

  <!-- 查询订单关联查询用户 -->
  <select id="findOrderUser"  resultType="com.hys.mybatis.po.OrderCustom">
 	select 
	tb_order.order_id id,
	tb_order.payment,
	tb_order.payment_type,
	tb_order.post_fee,
	tb_order.`status`,
	tb_user.id user_id,
	tb_user.username,
	tb_user.phone,
	tb_user.updated
	from tb_order,tb_user
	where tb_order.user_id = tb_user.id ;
  </select>
  
  <!-- 查询订单关联查询用户 ，使用resultMap-->
  <select id="findOrderUserMap" resultMap="orderCustomMap">
    select 
	tb_order.order_id id,
	tb_order.payment,
	tb_order.payment_type,
	tb_order.post_fee,
	tb_order.status,
	tb_order.user_id ,
	tb_user.username,
	tb_user.phone,
	tb_user.updated
	from tb_order,tb_user
	where tb_order.user_id = tb_user.id ;
  </select>
  
  <!-- 查询订单关联查询用户及订单明细，使用resultMap 一对多 -->
  <select id="findOrderUserItemMap" resultMap="orderUserItemMap">
    select 
	tb_order.order_id,
	tb_order.payment,
	tb_order.payment_type,
	tb_order.post_fee,
	tb_order.status,
	
	tb_user.id user_id,
	tb_user.username,
	tb_user.phone,
	tb_user.updated,
	
	tb_order_item.id item_id,
	tb_order_item.num,
	tb_order_item.pic_path,
	tb_order_item.price,
	tb_order_item.title,
	tb_order_item.total_fee
	from 
	tb_order,tb_user,tb_order_item
	where 
	tb_order.user_id = tb_user.id 
	and 
	tb_order.order_id = tb_order_item.order_id;
  </select>
  
  <select id="findUserItemMap" resultMap="userItemMap">
  	select 
	tb_order.order_id,
	tb_order.payment,
	tb_order.payment_type,
	tb_order.post_fee,
	tb_order.status,
	
	tb_user.id user_id,
	tb_user.username,
	tb_user.phone,
	tb_user.updated,
	
	tb_order_item.id order_item_id,
	tb_order_item.num,
	tb_order_item.total_fee,
	
	tb_item.id item_id,
	tb_item.title item_title,
	tb_item.price item_price
	
	from 
	tb_order,tb_user,tb_order_item,tb_item
	where 
	tb_order.user_id = tb_user.id 
	and 
	tb_order.order_id = tb_order_item.order_id
	and tb_item.id = tb_order_item.item_id;
  </select>
  
  <!-- 延迟加载的resultMap -->
  <resultMap type="com.hys.mybatis.po.Order" id="OrderUserLazyLoadingResultMap">
  	<!-- 对订单信息进行映射配置 -->
  	<id column="order_id" property="id"/>    
    <result column="payment" property="payment" />
    <result column="payment_type" property="payment_type"/>
    <result column="post_fee" property="post_fee"/>
    <result column="status" property="status"/>
    <result column="user_id" property="user_id"/>
  	<!-- 实现对用户信息进行延迟加载 
  		select:指定延迟加载需要执行的statement的id（根据user_id查询用户信息的statement）
  		要使用userMapper.xml中的findUserById完成根据用户id（user_id）用户信息的查询，如果findUserById 不在本mapper文件中需要加上namespace
  		column：订单信息中关联用户信息查询的列，是user_id
  		关联查询的sql理解为：
  		select tb_order.*,(select tb_user.id from tb_user where tb_order.user_id = tb_user.id) user_id,
    (select tb_user.username from tb_user where tb_order.user_id = tb_user.id) user_name	from tb_order; -->
  	<association property="user" javaType="com.hys.mybatis.po.User" 
  	  select="com.hys.mybatis.mapper.UserMapper.findUserById" column="user_id">
    </association>
  </resultMap>
  
  <!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
  <select id="findOrderUserLazyLoading" resultMap="OrderUserLazyLoadingResultMap">
  	select * from tb_order;
  </select>
  
</mapper>