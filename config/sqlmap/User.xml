<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用是对sql惊醒分类化管理，理解SQL隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用-->
<mapper namespace="test">
	<!--在映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
    id：标识映射文件中的SQL ,
    	将SQL语句封装到mapperdSatement对象中,所以将id称为statement的id
    	parameterType:指定输入参数的类型
    	#{}表示一个占位符号
    	#{id}:其中id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
    	resultType:指定SQL输出结果的所映射的Java对象类型，select指定resultType表示将单条记录映射成的Java对象。
    	-->
  <select id="findUserById" parameterType="int" resultType="com.hys.mybatis.po.User">
	select * from tb_user where id = #{id};
  </select>
  
  <!-- 根据用户名称模糊查询用户信息 ,可能返回多条数据
  resultType:指定的就是单条记录所映射的java对象类型
  ${}:表示凭借sql串，将接收到内容不加任何修饰拼接在sql中
  使用${}凭借sql 会引起sql注入
  ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能是value-->
  <select id="findUserByName" parameterType="java.lang.String" resultType="com.hys.mybatis.po.User">
  select * from tb_user where username like '%${value}%';
  </select>
  
 	<!--添加用户 
 	parameterType:指定输入参数类型是pojo(包括用户信息)
 	#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值-->
 	<insert id="insertUser" parameterType="com.hys.mybatis.po.User">
 		insert into tb_user(username, password, phone, email, created, updated) 
 		values(#{username},#{password},#{phone},#{email},#{created},#{updated})
 	</insert>
 	
 	<insert id="insertUserAll" parameterType="com.hys.mybatis.po.User">
 		insert into tb_user(id,username, password, phone, email, created, updated) 
 		values(#{id},#{username},#{password},#{phone},#{email},#{created},#{updated})
 	</insert>
 	
 	<insert id="insertUserSmall" parameterType="com.hys.mybatis.po.User">
 		insert into tb_user(username, password) 
 		values(#{username},#{password})
 	</insert>
 	
 	<insert id="insertUserSmall_wt" parameterType="com.hys.mybatis.po.User">
 		<!-- 将插入数据的主键返回到user对象中
 		select last_insert_id():得到insert进去记录的主键值，只适用于自增主键
 		keyProperty:将查询到主键值设置到parameterType指定的对象的那个属性
 		order:是select last_insert_id(()相对于insert语句来说它的执行顺序
 		 -->
 		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
 			select last_insert_id()
 		</selectKey>
 		insert into tb_user(username, password, created, updated) 
 		values(#{username},#{password},#{created},#{updated})
 	</insert>
 	
 	<insert id="insertUserSmall_uuid" parameterType="com.hys.mybatis.po.User">
 		<!-- 将插入数据的主键返回到user对象中
 		select last_insert_id():得到insert进去记录的主键值，只适用于自增主键
 		keyProperty:将查询到主键值设置到parameterType指定的对象的那个属性
 		order:是select last_insert_id(()相对于insert语句来说它的执行顺序
 		 -->
 		<!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
 			select last_insert_id()
 		</selectKey> -->
 		<!-- 使用MySQL的uuid()生成主键
 		执行过程：
 		首先通过uuid()得到主键，将主键设置到user对象的id属性中
 		其次在insert执行时，从user对象中去除id属性值 -->
 		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
 			select uuid();
 		</selectKey>
 		insert into tb_user(id,username, password, created, updated) 
 		values(#{id}, #{username},#{password},#{created},#{updated})
 	</insert>
 	
 	<!-- 删除用户 
 	根据id删除用户信息，需要输入id-->
 	<delete id="deleteUser" parameterType="java.lang.Integer">
 		delete from tb_user where id=#{id}
 	</delete>
 	
 	<!-- 根据id更新用户 
 	分析：
 	需要传入用户的id
 	需要传入用户的更新信息
 	parameterType指定user对象，包括id和更新信息，
 	注意：用户信息中id必须存在
 	#{id}：从输入user对象中获取id属性值
 	-->
 	<update id="updateUser" parameterType="com.hys.mybatis.po.User">
 		update tb_user set username=#{username},password=#{password},created=#{created},updated=#{updated} where id = #{id}
 	</update>
  
</mapper>